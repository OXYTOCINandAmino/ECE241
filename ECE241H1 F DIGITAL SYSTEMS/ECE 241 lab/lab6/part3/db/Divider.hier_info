|Divider
SW[0] => ~NO_FANOUT~
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
KEY[0] => reset.IN1
KEY[1] => go.IN1
CLOCK_50 => clk.IN1
HEX0[0] <= hex_decoder:H0.segments
HEX0[1] <= hex_decoder:H0.segments
HEX0[2] <= hex_decoder:H0.segments
HEX0[3] <= hex_decoder:H0.segments
HEX0[4] <= hex_decoder:H0.segments
HEX0[5] <= hex_decoder:H0.segments
HEX0[6] <= hex_decoder:H0.segments
HEX2[0] <= hex_decoder:H1.segments
HEX2[1] <= hex_decoder:H1.segments
HEX2[2] <= hex_decoder:H1.segments
HEX2[3] <= hex_decoder:H1.segments
HEX2[4] <= hex_decoder:H1.segments
HEX2[5] <= hex_decoder:H1.segments
HEX2[6] <= hex_decoder:H1.segments
HEX4[0] <= hex_decoder:H2.segments
HEX4[1] <= hex_decoder:H2.segments
HEX4[2] <= hex_decoder:H2.segments
HEX4[3] <= hex_decoder:H2.segments
HEX4[4] <= hex_decoder:H2.segments
HEX4[5] <= hex_decoder:H2.segments
HEX4[6] <= hex_decoder:H2.segments
HEX5[0] <= hex_decoder:H3.segments
HEX5[1] <= hex_decoder:H3.segments
HEX5[2] <= hex_decoder:H3.segments
HEX5[3] <= hex_decoder:H3.segments
HEX5[4] <= hex_decoder:H3.segments
HEX5[5] <= hex_decoder:H3.segments
HEX5[6] <= hex_decoder:H3.segments


|Divider|part3:u0
clk => clk.IN2
reset => reset.IN2
go => go.IN1
Divisor[0] => Divisor[0].IN1
Divisor[1] => Divisor[1].IN1
Divisor[2] => Divisor[2].IN1
Divisor[3] => Divisor[3].IN1
divident[0] => divident[0].IN1
divident[1] => divident[1].IN1
divident[2] => divident[2].IN1
divident[3] => divident[3].IN1
Quotient[0] <= datapath:D0.Divident_Final
Quotient[1] <= datapath:D0.Divident_Final
Quotient[2] <= datapath:D0.Divident_Final
Quotient[3] <= datapath:D0.Divident_Final
Remainder[0] <= datapath:D0.Reg_A_Final
Remainder[1] <= datapath:D0.Reg_A_Final
Remainder[2] <= datapath:D0.Reg_A_Final
Remainder[3] <= datapath:D0.Reg_A_Final


|Divider|part3:u0|control:C0
clk => current_state~1.DATAIN
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
reset => current_state.OUTPUTSELECT
go => Selector1.IN2
go => Selector0.IN2
go => next_state.Operate_1.DATAB
ld <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
ld_final <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
Shift_L <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
Subtract <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE


|Divider|part3:u0|datapath:D0
clk => Divident[0].CLK
clk => Divident[1].CLK
clk => Divident[2].CLK
clk => Divident[3].CLK
clk => Reg_A[0].CLK
clk => Reg_A[1].CLK
clk => Reg_A[2].CLK
clk => Reg_A[3].CLK
reset => Reg_A.OUTPUTSELECT
reset => Reg_A.OUTPUTSELECT
reset => Reg_A.OUTPUTSELECT
reset => Reg_A.OUTPUTSELECT
reset => Divident.OUTPUTSELECT
reset => Divident.OUTPUTSELECT
reset => Divident.OUTPUTSELECT
reset => Divident.OUTPUTSELECT
ld => Reg_A.OUTPUTSELECT
ld => Reg_A.OUTPUTSELECT
ld => Reg_A.OUTPUTSELECT
ld => Reg_A.OUTPUTSELECT
ld_final => Reg_A.OUTPUTSELECT
ld_final => Reg_A.OUTPUTSELECT
ld_final => Reg_A.OUTPUTSELECT
ld_final => Reg_A.OUTPUTSELECT
ld_final => Divident.OUTPUTSELECT
ld_final => Divident.OUTPUTSELECT
ld_final => Divident.OUTPUTSELECT
ld_final => Divident.OUTPUTSELECT
Divisor[0] => Add0.IN5
Divisor[1] => Add0.IN4
Divisor[2] => Add0.IN3
Divisor[3] => Add0.IN2
Divisor[4] => Add0.IN1
divident[0] => Divident.DATAA
divident[1] => Divident.DATAA
divident[2] => Divident.DATAA
divident[3] => Divident.DATAA
Shift_L => Reg_A_shift[1].LATCH_ENABLE
Shift_L => Reg_A_shift[0].LATCH_ENABLE
Shift_L => Divident_Final[3]$latch.LATCH_ENABLE
Shift_L => Divident_Final[2]$latch.LATCH_ENABLE
Shift_L => Divident_Final[1]$latch.LATCH_ENABLE
Shift_L => Reg_A_shift[2].LATCH_ENABLE
Shift_L => Reg_A_shift[3].LATCH_ENABLE
Shift_L => Reg_A_shift[4].LATCH_ENABLE
Subtract => Reg_A_subtract[4].LATCH_ENABLE
Subtract => Reg_A_subtract[3].LATCH_ENABLE
Subtract => Reg_A_subtract[2].LATCH_ENABLE
Subtract => Reg_A_subtract[1].LATCH_ENABLE
Subtract => Reg_A_subtract[0].LATCH_ENABLE
Reg_A_Final[0] <= Reg_A_Final.DB_MAX_OUTPUT_PORT_TYPE
Reg_A_Final[1] <= Reg_A_Final.DB_MAX_OUTPUT_PORT_TYPE
Reg_A_Final[2] <= Reg_A_Final.DB_MAX_OUTPUT_PORT_TYPE
Reg_A_Final[3] <= Reg_A_Final.DB_MAX_OUTPUT_PORT_TYPE
Reg_A_Final[4] <= Reg_A_Final.DB_MAX_OUTPUT_PORT_TYPE
Divident_Final[0] <= Reg_A_subtract[4].DB_MAX_OUTPUT_PORT_TYPE
Divident_Final[1] <= Divident_Final[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
Divident_Final[2] <= Divident_Final[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
Divident_Final[3] <= Divident_Final[3]$latch.DB_MAX_OUTPUT_PORT_TYPE


|Divider|hex_decoder:H0
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|Divider|hex_decoder:H1
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|Divider|hex_decoder:H2
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


|Divider|hex_decoder:H3
hex_digit[0] => Decoder0.IN3
hex_digit[1] => Decoder0.IN2
hex_digit[2] => Decoder0.IN1
hex_digit[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE


